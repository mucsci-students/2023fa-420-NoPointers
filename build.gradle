plugins {
    id 'java'
    id 'application'
    id 'org.javamodularity.moduleplugin' version '1.8.12'
    id 'org.openjfx.javafxplugin' version '0.0.13'
    id 'org.beryx.jlink' version '2.25.0'
    id 'jacoco'
}
run
        {
            standardInput = System.in

        }
jar {
    manifest {
        attributes(

                'Main-Class': 'nopointers.Main'
        )
    }

    duplicatesStrategy = DuplicatesStrategy.EXCLUDE
}

group 'com.example'
version '1.0-SNAPSHOT'

apply plugin: 'jacoco'

repositories {
    mavenCentral()
}

ext {
    junitVersion = '5.9.2'
}



sourceCompatibility = '17'
targetCompatibility = '17'

tasks.withType(JavaCompile) {
    options.encoding = 'UTF-8'
}

application {
    mainModule = 'nopointers'
    mainClass = 'nopointers.Main'
}

javafx {
    version = "21"
    modules = [ 'javafx.controls' , 'javafx.fxml']
}

dependencies {
    implementation (group: 'org.openjfx', name: 'javafx-controls', version: '22-ea+11')
            {
                exclude group: 'org.hamcrest', module: 'hamcrest-core'
            }
    implementation('org.xerial:sqlite-jdbc:3.43.0.0')
            {
                exclude group: 'org.hamcrest', module: 'hamcrest-core'
            }
    implementation('com.github.cliftonlabs:json-simple:4.0.1')
            {
                exclude group: 'org.hamcrest', module: 'hamcrest-core'
            }
    implementation ('org.json:json:20230227')
            {
                exclude group: 'org.hamcrest', module: 'hamcrest-core'
            }
    testImplementation("org.junit.jupiter:junit-jupiter-api:${junitVersion}")
    testRuntimeOnly("org.junit.jupiter:junit-jupiter-engine:${junitVersion}")
    implementation("com.googlecode.json-simple:json-simple:1.1.1")
            {
                exclude group: 'org.hamcrest', module: 'hamcrest-core'
            }

    implementation 'org.kordamp.ikonli:ikonli-javafx:12.3.1'
    implementation 'io.github.palexdev:materialfx:11.16.1'
    implementation 'com.google.code.gson:gson:2.10.1'
}

test {
    useJUnitPlatform()
    finalizedBy jacocoTestReport
}
jacocoTestReport {
    reports {
        xml.required = true
        html.required = false
    }
    dependsOn test // tests are required to run before generating the report
}

jlink {
    imageZip = project.file("${buildDir}/distributions/app-${javafx.platform.classifier}.zip")
    options = ['--strip-debug', '--compress', '2', '--no-header-files', '--no-man-pages']
    launcher {
        name = 'app'
    }
}

jlinkZip {
    group = 'distribution'
}